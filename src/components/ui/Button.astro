---
import { Icon } from "astro-icon/components";

type ButtonVariant = "primary" | "secondary" | "outline";

export interface Props {
    link?: string;
    text: string;
    iconName?: string;
    variant?: ButtonVariant;
    ariaLabel?: string;
    disabled?: boolean;
    isLoading?: boolean;
    isExternal?: boolean;
    isActive?: boolean;
    class?: string;
    scrollTarget?: string;
    onClick?: string;
}

const {
    link,
    text,
    iconName,
    variant = "primary",
    ariaLabel,
    disabled = false,
    isLoading = false,
    isExternal = false,
    isActive = false,
    class: className = "",
    scrollTarget,
    onClick
} = Astro.props as Props;

// Clases base
const baseClasses = `
    btn-${variant}
    border-2
    group
    flex
    items-center
    justify-center
    cursor-pointer
    transition-all
    ease-in-out
    rounded-lg
    font-medium
    disabled:opacity-50
    disabled:cursor-not-allowed
    hover:scale-105
`;

// Variantes específicas los estilos
const variantClasses = {
    primary: `
        border-cream-300 
        hover:border-primary-500 
        hover:bg-primary-500 
        hover:bg-primary-600 
        text-white 
        px-6 py-3
    `,
    secondary: `
        border-secondary-300 
        hover:border-secondary-500 
        bg-secondary-500 
        hover:bg-secondary-600 
        text-white 
        px-6 py-3
    `,
    outline: `
        border-primary-500 
        hover:bg-primary-500 
        bg-transparent 
        hover:text-white 
        text-primary-500 
        px-6 py-3
    `
};

// Clases para iconos
const iconClasses = "w-5 h-5 mr-2";

const buttonClasses = `${baseClasses} ${variantClasses[variant]}`;

// Generar aria-label si no se proporciona
const buttonAriaLabel = ariaLabel || (iconName ? `${text} ${iconName}` : text);

// Determinar si es un enlace externo
const isExternalLink = isExternal || (link && link.startsWith('http'));

// Atributos adicionales para enlaces externos
const externalAttributes = isExternalLink ? {
    target: '_blank',
    rel: 'noopener noreferrer'
} : {};

// Estado de carga
const loadingText = isLoading ? 'Cargando...' : text;
const loadingAriaLabel = isLoading ? `${buttonAriaLabel} - Cargando` : buttonAriaLabel;

// Determinar el onclick
const onClickHandler = onClick || (scrollTarget ? `scrollToSection('${scrollTarget}')` : undefined);

// Determinar si usar enlace o botón
const useButton = !link || scrollTarget || onClick;
---

{useButton ? (
    <button
            class:list={[buttonClasses, className]}
            onclick={onClickHandler}
            aria-label={loadingAriaLabel}
            disabled={disabled}
            aria-disabled={disabled}
            aria-busy={isLoading}
            aria-pressed={isActive}
    >
        {iconName && <Icon name={iconName} class={iconClasses} aria-hidden="true" />}
        {isLoading && <Icon name="mdi:loading" class="animate-spin w-5 h-5 mr-2" aria-hidden="true" />}
        {loadingText}
    </button>
    ) : (
    <a
            class:list={[buttonClasses, className]}
            href={disabled ? '#' : link}
            aria-label={loadingAriaLabel}
            role="button"
            aria-disabled={disabled}
            aria-busy={isLoading}
            aria-pressed={isActive}
            {...externalAttributes}
    >
        {iconName && <Icon name={iconName} class={iconClasses} aria-hidden="true" />}
        {isLoading && <Icon name="mdi:loading" class="animate-spin w-5 h-5 mr-2" aria-hidden="true" />}
        {loadingText}
    </a>
)}